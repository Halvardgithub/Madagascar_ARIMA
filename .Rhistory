# model <- df_tsibble |>
#   model(
#     ARIMA(n_palu ~ rain_mm_3 + temp_c_3 + net_time)
#   )
# report(model)
train_chap("input/trainData.csv", "output/model.bin")
warnings()
train_single_region <- function(df, location){
df <- mutate(df, date = yearmonth(date)) #so tsibble understands it is monthly data, fails with exact date
df <- create_lagged_feature(df, "rain_mm", 3, include_all = FALSE)$df
df <- create_lagged_feature(df, "temp_c", 3, include_all = FALSE)$df
df <- cut_top_rows(df, 3)
df_tsibble <- as_tsibble(df, index = date)
model <- df_tsibble |>
model(
ARIMA(n_palu ~ rain_mm_3 + temp_c_3 + net_time)
)
return(model)
}
train_chap("input/trainData.csv", "output/model.bin")
?forecast
predict_chap("output/model.bin", "input/trainData.csv", "input/futureClimateData.csv", "output/predictions.csv")
predict_chap <- function(model_fn, historic_data_fn, future_climatedata_fn, predictions_fn) {
future_per_location <- get_df_per_location(future_climatedata_fn)
historic_per_location <- get_df_per_location(historic_data_fn)
models <- readRDS(model_fn)  # Assumes the model was saved using saveRDS
first_location <- TRUE
for (location in names(future_per_location)){
df <- future_per_location[[location]]
historic_df <- historic_per_location[[location]]
model <- models[[location]]
df <- mutate(df, date = yearmonth(date)) #so tsibble understands it is monthly data, fails with exact date
df <- create_lagged_feature(df, "rain_mm", 3, include_all = FALSE)$df
df <- create_lagged_feature(df, "temp_c", 3, include_all = FALSE)$df
df <- fill_top_rows_from_historic_last_rows("rain_mm", 3, df, historic_df)
df <- fill_top_rows_from_historic_last_rows("temp_c", 3, df, historic_df)
df_tsibble_new <- as_tsibble(df, index = date)
return(forecast(model, h = nrow(df_tsibble_new), new_data = df_tsibble_new))
X <- df[, c("rainfall", "mean_temperature"), drop = FALSE]
X <- create_lagged_feature(X, "mean_temperature", 1)$df
X <- create_lagged_feature(X, "rainfall", 1)$df
X <- fill_top_rows_from_historic_last_rows("mean_temperature", 1, X, historic_df)
X <- fill_top_rows_from_historic_last_rows("rainfall", 1, X, historic_df)
last_disease_col <- get_lagged_col_name("disease_cases", 1)
X[last_disease_col] <- NA
df["sample_0"] <- NA
prev_disease <- historic_df[nrow(historic_df), "disease_cases"]
for(i in 1:nrow(X)){
X[i, last_disease_col] <- prev_disease
y_one_pred <- predict(model, newdata = X[i,])
df[i, "sample_0"] <- y_one_pred
prev_disease <- y_one_pred
}
if (first_location){
full_df <- df
first_location <- FALSE
}
else {
full_df <- rbind(full_df, df)
}
print(paste("Forecasted values:", paste(df[, "sample_0", drop=TRUE], collapse = ", ")))
}
write.csv(full_df, predictions_fn, row.names = FALSE)
}
predict_chap("output/model.bin", "input/trainData.csv", "input/futureClimateData.csv", "output/predictions.csv")
predict_chap <- function(model_fn, historic_data_fn, future_climatedata_fn, predictions_fn) {
future_per_location <- get_df_per_location(future_climatedata_fn)
historic_per_location <- get_df_per_location(historic_data_fn)
models <- readRDS(model_fn)  # Assumes the model was saved using saveRDS
first_location <- TRUE
for (location in names(future_per_location)){
df <- future_per_location[[location]]
historic_df <- historic_per_location[[location]]
model <- models[[location]]
df <- mutate(df, date = yearmonth(date)) #so tsibble understands it is monthly data, fails with exact date
df <- create_lagged_feature(df, "rain_mm", 3, include_all = FALSE)$df
df <- create_lagged_feature(df, "temp_c", 3, include_all = FALSE)$df
df <- fill_top_rows_from_historic_last_rows("rain_mm", 3, df, historic_df)
df <- fill_top_rows_from_historic_last_rows("temp_c", 3, df, historic_df)
df_tsibble_new <- as_tsibble(df, index = date)
return(forecast(model, new_data = df_tsibble_new))
X <- df[, c("rainfall", "mean_temperature"), drop = FALSE]
X <- create_lagged_feature(X, "mean_temperature", 1)$df
X <- create_lagged_feature(X, "rainfall", 1)$df
X <- fill_top_rows_from_historic_last_rows("mean_temperature", 1, X, historic_df)
X <- fill_top_rows_from_historic_last_rows("rainfall", 1, X, historic_df)
last_disease_col <- get_lagged_col_name("disease_cases", 1)
X[last_disease_col] <- NA
df["sample_0"] <- NA
prev_disease <- historic_df[nrow(historic_df), "disease_cases"]
for(i in 1:nrow(X)){
X[i, last_disease_col] <- prev_disease
y_one_pred <- predict(model, newdata = X[i,])
df[i, "sample_0"] <- y_one_pred
prev_disease <- y_one_pred
}
if (first_location){
full_df <- df
first_location <- FALSE
}
else {
full_df <- rbind(full_df, df)
}
print(paste("Forecasted values:", paste(df[, "sample_0", drop=TRUE], collapse = ", ")))
}
write.csv(full_df, predictions_fn, row.names = FALSE)
}
predict_chap("output/model.bin", "input/trainData.csv", "input/futureClimateData.csv", "output/predictions.csv")
future_per_location <- get_df_per_location("input/futureClimateData.csv")
historic_per_location <- get_df_per_location("input/trainData.csv")
models <- readRDS("output/model.bin")
df <- future_per_location[[location]]
historic_df <- historic_per_location[[location]]
names(future_per_location)
location <- names(future_per_location)[1]
location
df <- future_per_location[[location]]
historic_df <- historic_per_location[[location]]
model <- models[[location]]
View(df)
View(historic_df)
library(dplyr)
library(lubridate)
original_df <- read.csv("input/malaria-u5-modelData.csv")
useful_df <- original_df[, c("csb", "date", "n_palu", "rain_mm", "temp_c")] #keeps the relevant columns
useful_df <- mutate(useful_df, date = as.Date(date))
colnames(useful_df)[colnames(useful_df) == "csb"] <- "location"
class(useful_df$date)
date <- as.Date("2017-01-01")
useful_df <- mutate(useful_df, net_time = case_when(
date<as.Date("2018-08-01") ~ as.numeric(date - as.Date("2015-08-01")+1)/365,
date<as.Date("2021-08-01") ~ as.numeric(date - as.Date("2018-08-01")+1)/365,
#to update when nets distribution happens
date<as.Date("2025-08-01") ~ as.numeric(date - as.Date("2021-08-01")+1)/365
))
#split into training and future data, removed data before july 2016 as in the original code
train_df <- filter(useful_df, date > as.Date("2016-06-01") & date < as.Date("2023-01-01"))
test_df <- filter(useful_df, date >= as.Date("2023-01-01") & date < as.Date("2024-01-01"))
test_df <- subset(test_df, select= -n_palu)
#Save them in the input folder as csv files
write.csv(train_df, "input/trainData.csv", row.names = FALSE)
write.csv(test_df, "input/futureClimateData.csv", row.names = FALSE)
future_per_location <- get_df_per_location("input/futureClimateData.csv")
historic_per_location <- get_df_per_location("input/trainData.csv")
models <- readRDS("output/model.bin")
location <- names(future_per_location)[1]
df <- future_per_location[[location]]
historic_df <- historic_per_location[[location]]
model <- models[[location]]
View(df)
df <- mutate(df, date = yearmonth(date)) #so tsibble understands it is monthly data, fails with exact date
df <- create_lagged_feature(df, "rain_mm", 3, include_all = FALSE)$df
df <- create_lagged_feature(df, "temp_c", 3, include_all = FALSE)$df
df <- fill_top_rows_from_historic_last_rows("rain_mm", 3, df, historic_df)
df <- fill_top_rows_from_historic_last_rows("temp_c", 3, df, historic_df)
df_tsibble_new <- as_tsibble(df, index = date)
View(df_tsibble_new)
forca <- forecast(model, new_data = df_tsibble_new)
forca
forca[1, "n_palu"]
predicted_dists <- forecast(model, new_data = df_tsibble_new)
preds <- data.frame(matrix(ncol = 101, nrow = nrow(df_tsibble_new)))  # 5 rows as an example
# Assign column names
colnames(df) <- paste("sample", 0:100, sep = "_")
# Assign column names
colnames(df) <- length(paste("sample", 0:100, sep = "_"))
length(paste("sample", 0:100, sep = "_"))
paste("sample", 0:100, sep = "_")
# Assign column names
colnames(preds) <- paste("sample", 0:100, sep = "_")
View(preds)
predicted_dists$mean[1]
predicted_dists
predicted_dists[1, "n_palu"]
predicted_dists[1, "n_palu"][1]
dis <- predicted_dists[1, "n_palu"][1]
dis
samples(5, dis)
sample(5, dis)
dis <- predicted_dists[1, "n_palu"]$n_palu
dis
dis <- predicted_dists[1, "n_palu"]$n_palu[1]
dis
dis <- predicted_dists[1, "n_palu"]$n_palu[[1]]
dis
dis <- predicted_dists[1, "n_palu"]$n_palu
dis
mean(dis)
sd(dis)
varience(dis)
variance(dis)
install.packages("distributional") # Install if not already installed
library(distributional)
variance(dis)
sd(dis)
for(i in 1:nrow(df_tsibble_new)){
dist <- predicted_dists[i, "n_palu"]$n_palu
preds[i] <- rnorm(101, mean = mean(dist), sd = sqrt(variance(dist)))
}
for(i in 1:nrow(df_tsibble_new)){
dist <- predicted_dists[i, "n_palu"]$n_palu
preds[i,] <- rnorm(101, mean = mean(dist), sd = sqrt(variance(dist)))
}
View(preds)
dist
sample_df <- cbind(df, preds)
View(sample_df)
df <- future_per_location[[location]]
View(df)
historic_df <- historic_per_location[[location]]
model <- models[[location]]
df <- mutate(df, date = yearmonth(date)) #so tsibble understands it is monthly data, fails with exact date
df <- create_lagged_feature(df, "rain_mm", 3, include_all = FALSE)$df
df <- create_lagged_feature(df, "temp_c", 3, include_all = FALSE)$df
df <- fill_top_rows_from_historic_last_rows("rain_mm", 3, df, historic_df)
df <- fill_top_rows_from_historic_last_rows("temp_c", 3, df, historic_df)
df_tsibble_new <- as_tsibble(df, index = date)
predicted_dists <- forecast(model, new_data = df_tsibble_new)
preds <- data.frame(matrix(ncol = 100, nrow = nrow(df_tsibble_new)))  # 5 rows as an example
# Assign column names
colnames(preds) <- paste("sample", 1:100, sep = "_")
for(i in 1:nrow(df_tsibble_new)){
dist <- predicted_dists[i, "n_palu"]$n_palu
preds[i,] <- rnorm(100, mean = mean(dist), sd = sqrt(variance(dist)))
}
sample_df <- cbind(df, preds)
predict_chap <- function(model_fn, historic_data_fn, future_climatedata_fn, predictions_fn) {
future_per_location <- get_df_per_location(future_climatedata_fn)
historic_per_location <- get_df_per_location(historic_data_fn)
models <- readRDS(model_fn)  # Assumes the model was saved using saveRDS
first_location <- TRUE
for (location in names(future_per_location)){
df <- future_per_location[[location]]
historic_df <- historic_per_location[[location]]
model <- models[[location]]
df <- mutate(df, date = yearmonth(date)) #so tsibble understands it is monthly data, fails with exact date
df <- create_lagged_feature(df, "rain_mm", 3, include_all = FALSE)$df
df <- create_lagged_feature(df, "temp_c", 3, include_all = FALSE)$df
df <- fill_top_rows_from_historic_last_rows("rain_mm", 3, df, historic_df)
df <- fill_top_rows_from_historic_last_rows("temp_c", 3, df, historic_df)
df_tsibble_new <- as_tsibble(df, index = date)
predicted_dists <- forecast(model, new_data = df_tsibble_new)
preds <- data.frame(matrix(ncol = 100, nrow = nrow(df_tsibble_new)))  # 5 rows as an example
# Assign column names
colnames(preds) <- paste("sample", 1:100, sep = "_")
for(i in 1:nrow(df_tsibble_new)){
dist <- predicted_dists[i, "n_palu"]$n_palu
preds[i,] <- rnorm(100, mean = mean(dist), sd = sqrt(variance(dist)))
}
sample_df <- cbind(df, preds)
if (first_location){
full_df <- sample_df
first_location <- FALSE
}
else {
full_df <- rbind(full_df, sample_df)
}
#print(paste("Forecasted values:", paste(df[, "sample_0", drop=TRUE], collapse = ", ")))
}
write.csv(full_df, predictions_fn, row.names = FALSE)
}
predict_chap("output/model.bin", "input/trainData.csv", "input/futureClimateData.csv", "output/predictions.csv")
View(sample_df)
source("utils.R")
library(dplyr)
library(fable)
library(tsibble)
library(lubridate)
dataframe_list <- get_df_per_location("input/trainData.csv")
df <- dataframe_list[[3]]
df <- mutate(df, date = yearmonth(date)) #so tsibble understands it is monthly data, fails with exact date
df <- create_lagged_feature(df, "rain_mm", 3, include_all = FALSE)$df
df <- create_lagged_feature(df, "temp_c", 3, include_all = FALSE)$df
df <- cut_top_rows(df, 3)
df <- dataframe_list[[3]]
df <- mutate(df, date = yearmonth(date)) |> #so tsibble understands it is monthly data, fails with exact date
create_lagged_feature("rain_mm", 3, include_all = FALSE)$df |>
create_lagged_feature("temp_c", 3, include_all = FALSE)$df |>
cut_top_rows(3)
source("utils.R")
df <- mutate(df, date = yearmonth(date)) |> #so tsibble understands it is monthly data, fails with exact date
create_lagged_feature("rain_mm", 3, include_all = FALSE) |>
create_lagged_feature("temp_c", 3, include_all = FALSE) |>
cut_top_rows(3)
View(df)
colnames(df)[1] <- "time_period"
setwd("C:/Users/Halvard/Documents/GitHub/Madagascar_ARIMA")
source("train.R")
source("predict.R")
train_chap("input/trainData.csv", "output/model.bin")
predict_chap("output/model.bin", "input/trainData.csv", "input/futureClimateData.csv", "output/predictions.csv")
source("train.R")
source("predict.R")
train_chap("input/trainData.csv", "output/model.bin")
predict_chap("output/model.bin", "input/trainData.csv", "input/futureClimateData.csv", "output/predictions.csv")
CHAP_df <- read.scv("input/training_data")
CHAP_df <- read.csv("input/training_data")
setwd("C:/Users/Halvard/Documents/GitHub/Madagascar_ARIMA")
CHAP_df <- read.csv("input/training_data")
CHAP_df <- read.csv("input/training_data.csv")
View(CHAP_df)
original_df <- read.csv("input/malaria-u5-modelData.csv")
useful_df <- original_df[, c("csb", "date", "n_palu", "rain_mm", "temp_c")] #keeps the relevant columns
View(useful_df)
colnames(useful_df) <- c("location", "time_period", "disease_cases", "rainfall", "mean_temperature")
library(dplyr)
library(lubridate)
CHAP_df <- read.csv("input/training_data.csv")
#CHAP_df has the desired column names used internally by CHAP
original_df <- read.csv("input/malaria-u5-modelData.csv")
useful_df <- original_df[, c("csb", "date", "n_palu", "rain_mm", "temp_c")] #keeps the relevant columns
useful_df <- mutate(useful_df, date = as.Date(date))
colnames(useful_df) <- c("location", "time_period", "disease_cases", "rainfall", "mean_temperature")
useful_df <- mutate(useful_df, net_time = case_when(
time_period<as.Date("2018-08-01") ~ as.numeric(time_period - as.Date("2015-08-01")+1)/365,
time_period<as.Date("2021-08-01") ~ as.numeric(time_period - as.Date("2018-08-01")+1)/365,
#to update when nets distribution happens
time_period<as.Date("2025-08-01") ~ as.numeric(time_period - as.Date("2021-08-01")+1)/365
))
#split into training and future data, removed data before july 2016 as in the original code
train_df <- filter(useful_df, time_period > as.Date("2016-06-01") & time_period < as.Date("2023-01-01"))
test_df <- filter(useful_df, time_period >= as.Date("2023-01-01") & time_period < as.Date("2024-01-01"))
test_df <- subset(test_df, select= -disease_cases)
#Save them in the input folder as csv files
write.csv(train_df, "input/trainData.csv", row.names = FALSE)
write.csv(test_df, "input/futureClimateData.csv", row.names = FALSE)
yearmonth(2024-06)
yearmonth("2024-06")
source("train.R")
source("predict.R")
train_chap("input/trainData.csv", "output/model.bin")
predict_chap("output/model.bin", "input/trainData.csv", "input/futureClimateData.csv", "output/predictions.csv")
train_chap("input/training_data.csv", "output/model.bin")
future_per_location <- get_df_per_location("input/futureClimateData.csv")
historic_per_location <- get_df_per_location("input/trainingData.csv")
historic_per_location <- get_df_per_location("input/trainData.csv")
df <- future_per_location[[1]]
historic_df <- historic_per_location[[1]]
View(df)
View(historic_df)
df$disease_cases <- NA
tot_df <- rbind(historic_df, df)
View(tot_df)
df <- future_per_location[[1]]
historic_df <- historic_per_location[[1]]
tot_df <- rbind(historic_df, df) #rbind them together
df$disease_cases <- NA
tot_df <- rbind(historic_df, df) #rbind them together
tot_df2 <- mutate(tot_df, time_period = yearmonth(time_period)) |> #so tsibble understands it is monthly data, fails with exact date
create_lagged_feature("rainfall", 3, include_all = FALSE) |>
create_lagged_feature("mean_temperature", 3, include_all = FALSE) #|>
View(tot_df2)
future_df <- tot_df2[nrow(historic_df) + 1: nrow(tot_df)]
future_df <- tot_df2[nrow(historic_df) + 1: nrow(tot_df),]
future_df <- tot_df2[(nrow(historic_df) + 1): nrow(tot_df),]
View(future_df)
train_chap("input/training_data.csv", "output/model.bin")
source("train.R")
source("predict.R")
train_chap("input/training_data.csv", "output/model.bin")
predict_chap("output/model.bin", "input/historic_data.csv", "input/future_data.csv", "output/predictions_CHAP.csv")
source("predict.R")
predict_chap("output/model.bin", "input/historic_data.csv", "input/future_data.csv", "output/predictions_CHAP.csv")
source("predict.R")
predict_chap("output/model.bin", "input/historic_data.csv", "input/future_data.csv", "output/predictions_CHAP.csv")
as.Date("2024 Jan")
source("predict.R")
predict_chap("output/model.bin", "input/historic_data.csv", "input/future_data.csv", "output/predictions_CHAP.csv")
source("train.R")
source("predict.R")
train_chap("input/training_data.csv", "output/model.bin")
predict_chap("output/model.bin", "input/historic_data.csv", "input/future_data.csv", "output/predictions_CHAP.csv")
dataframe_list <- get_df_per_location("input/training_data.csv")
dataframe_list <- get_df_per_location("input/training_data.csv")
df <- dataframe_list[[1]]
source("utils.R")
library(dplyr)
library(fable)
library(tsibble)
library(lubridate)
dataframe_list <- get_df_per_location("input/training_data.csv")
df <- dataframe_list[[1]]
#try without switching to monthly
df <- create_lagged_feature("rainfall", 3, include_all = FALSE) |>
create_lagged_feature("mean_temperature", 3, include_all = FALSE) |>
cut_top_rows(3)
#try without switching to monthly
df <- create_lagged_feature(df, "rainfall", 3, include_all = FALSE) |>
create_lagged_feature("mean_temperature", 3, include_all = FALSE) |>
cut_top_rows(3)
df_tsibble <- as_tsibble(df, index = time_period)
?forecast
#testing
future_per_location <- get_df_per_location("future_data.csv")
#testing
future_per_location <- get_df_per_location("input/future_data.csv")
historic_per_location <- get_df_per_location("input/historic_data.csv")
models <- readRDS("output/model.bin")
df <- future_per_location[[1]]
historic_df <- historic_per_location[[1]]
model <- models[[1]]
model
report(model)
View(model)
model[[1]]
model[[1]]$data
model[[1]][[1]]
model[[1]][[1]]$data
historic_df
model[[1]][[1]]$data <- historic_df
model[[1]][[1]]$data
df$disease_cases <- NA #so the dataframes have the same columns
tot_df <- rbind(historic_df, df) |> #row-bind them together
mutate(time_period = yearmonth(time_period)) |> #so tsibble understands it is monthly data, fails with exact date
create_lagged_feature("rainfall", 3, include_all = FALSE) |>
create_lagged_feature("mean_temperature", 3, include_all = FALSE)
future_df <- tot_df[(nrow(historic_df) + 1): nrow(tot_df),]
df_tsibble_new <- as_tsibble(future_df, index = time_period)
predicted_dists <- forecast(model, new_data = df_tsibble_new)
View(predicted_dists)
test_med_all_data <- predicted_dists
df <- future_per_location[[1]]
historic_df <- historic_per_location[[1]]
model <- models[[1]]
model[[1]][[1]]$data <- historic_df[, c("time_period", "disease_cases")]
df$disease_cases <- NA #so the dataframes have the same columns
tot_df <- rbind(historic_df, df) |> #row-bind them together
mutate(time_period = yearmonth(time_period)) |> #so tsibble understands it is monthly data, fails with exact date
create_lagged_feature("rainfall", 3, include_all = FALSE) |>
create_lagged_feature("mean_temperature", 3, include_all = FALSE)
future_df <- tot_df[(nrow(historic_df) + 1): nrow(tot_df),]
df_tsibble_new <- as_tsibble(future_df, index = time_period)
predicted_dists <- forecast(model, new_data = df_tsibble_new)
View(predicted_dists)
#testing
future_per_location <- get_df_per_location("input/future_data.csv")
historic_per_location <- get_df_per_location("input/historic_data.csv")
models <- readRDS("output/model.bin")
df <- future_per_location[[1]]
historic_df <- historic_per_location[[1]]
model <- models[[1]]
model[[1]][[1]]$data[, "time_period"]
model[[1]][[1]]$data[, "time_period"][-1]
model[[1]][[1]]$data[, "time_period"][-1, ]
model[[1]][[1]]$data[, "time_period"][, -1]
model[[1]][[1]]$data[, "time_period"][, 1]
model[[1]][[1]]$data[, "time_period"]
hei <- model[[1]][[1]]$data[, "time_period"]
View(hei)
hei[200]
hei[200, 1]
max(hei)
hei.shape()
length(hei)
length(hei[1])
hei[1]
length(hei[1M])
typeof(hei)
hei[[5]]
hei[1][[5]]
hei$time_period
hei <- model[[1]][[1]]$data[, "time_period"]$time_period[-1]
hei
hei <- model[[1]][[1]]$data[, "time_period"]$time_period
hei
hei[2]
length(hei)
hei[length(hei)]
times_training <- model[[1]][[1]]$data[, "time_period"]$time_period
last_time_training <-  times_training[length(times_training)]
last_time_training
last_time_training < as.Date("2020-01-01")
as.Date(last_time_training)
as.Date(last_time_training) < as.Date("2020-01-01")
df$disease_cases <- NA #so the dataframes have the same columns
tot_df <- rbind(historic_df, df) |> #row-bind them together
mutate(time_period = yearmonth(time_period)) |> #so tsibble understands it is monthly data, fails with exact date
create_lagged_feature("rainfall", 3, include_all = FALSE) |>
create_lagged_feature("mean_temperature", 3, include_all = FALSE)
future_df <- filter(tot_df, time_period > as.Date(last_time_training))
future_df <- filter(tot_df, as.Date(time_period) > as.Date(last_time_training))
future_df
last_time_training
df_tsibble_new <- as_tsibble(future_df, index = time_period)
predicted_dists <- forecast(model, new_data = df_tsibble_new)
View(predicted_dists)
source("train.R")
rlang::last_trace()
source("train.R")
source("predict.R")
#For testing with the CHAP-data locally
train_chap("input/training_data.csv", "output/model.bin")
predict_chap("output/model.bin", "input/historic_data.csv", "input/future_data.csv", "output/predictions_CHAP.csv")
source("train.R")
source("predict.R")
train_chap("input/trainData.csv", "output/model.bin")
predict_chap("output/model.bin", "input/trainData.csv", "input/futureClimateData.csv", "output/predictions.csv")
predict_chap("output/model.bin", "input/trainData.csv", "input/futureClimateData.csv", "output/predictions.csv")
source("predict.R")
predict_chap("output/model.bin", "input/trainData.csv", "input/futureClimateData.csv", "output/predictions.csv")
source("predict.R")
predict_chap("output/model.bin", "input/trainData.csv", "input/futureClimateData.csv", "output/predictions.csv")
source("predict.R")
predict_chap("output/model.bin", "input/trainData.csv", "input/futureClimateData.csv", "output/predictions.csv")
source("predict.R")
predict_chap("output/model.bin", "input/trainData.csv", "input/futureClimateData.csv", "output/predictions.csv")
#For testing with the CHAP-data locally
train_chap("input/training_data.csv", "output/model.bin")
predict_chap("output/model.bin", "input/historic_data.csv", "input/future_data.csv", "output/predictions_CHAP.csv")
#For testing with the CHAP-data locally
train_chap("input/training_data.csv", "output/model.bin")
predict_chap("output/model.bin", "input/historic_data.csv", "input/future_data.csv", "output/predictions_CHAP.csv")
